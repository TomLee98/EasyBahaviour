classdef EBKernelOptions < handle
    %EBKERNELOPTIONS This class define kernel running options
    
    properties(Access = public, Dependent)
        ScaleOptions                % set/get, 1-by-1 struct

        TrackerOptions              % set/get, 1-by-1 struct, easy generated by trackset

        ParameterizerOptions        % set/get, 1-by-1 struct, easy generated by paramset

        PopulationOptions           % set/get, 1-by-1 struct, easy generated by populset
    end

    properties(Access=private, Hidden)
        option              % 1-by-1 dictionary, key in [scale, tracker, parameterizer, population]
    end
    
    methods
        function this = EBKernelOptions(varargin)
            %EBKERNELOPTIONS A Constructor
            % read Name-Value pair
            p = inputParser;
            p.StructExpand = false;

            this.option = EBKernelOptions.defaultOptions();

            addParameter(p, "Scale", this.option("scale"), @(x)validatescale(x));
            addParameter(p, "Tracker", this.option("tracker"), @(x)validatetracker(x));
            addParameter(p, "Parameterizer", this.option("parameterizer"), @(x)validateparameterizer(x));
            addParameter(p, "Population", this.option("population"), @(x)validatepopulation(x));

            parse(p, varargin{:});

            this.option("scale") = p.Results.Scale;
            this.option("tracker") = p.Results.Tracker;
            this.option("parameterizer") = p.Results.Parameterizer;
            this.option("population") = p.Results.Population;
        end

        %% ScaleOptions Getter & Setter
        function value = get.ScaleOptions(this)
            value = this.option("scale");
        end

        function set.ScaleOptions(this, value)
            arguments
                this
                value   (1,1)   struct  {validatescale}
            end

            this.option("scale") = value;
        end

        %% TrackerOptions Getter & Setter
        function value = get.TrackerOptions(this)
            value = this.option("tracker");
        end

        function set.TrackerOptions(this, value)
            arguments
                this
                value   (1,1)   struct  {validatetracker}
            end

            this.option("tracker") = value;
        end
        %% ParameterizerOptions Getter & Setter
        function value = get.ParameterizerOptions(this)
            value = this.option("parameterizer");
        end

        function set.ParameterizerOptions(this, value)
            arguments
                this
                value   (1,1)   struct  {validateparameterizer}
            end

            this.option("scale") = value;
        end

        %% PopulationOptions Getter & Setter
        function value = get.PopulationOptions(this)
            value = this.option("population");
        end
    end

    methods(Static)
        function options = defaultOptions()
            %% Scale Options
            scale_option = struct("XRes",       0.1, ...    % mm / pix
                                  "YRes",       0.1, ...    % mm / pix
                                  "ResUnit",    "mm", ...
                                  "BarLength",  10);

            %% Tracker Options
            tracker_option = trackset();

            %% Parameterizer Options
            parameterizer_option = paramset();

            %% PFA(Population Features Analysis) Options

            population_option = populset();

            options = dictionary("scale",           scale_option, ...
                                 "tracker",         tracker_option, ...
                                 "parameterizer",   parameterizer_option, ...
                                 "population",      population_option);
        end
    end
end

function validatescale(A)
if ~isstruct(A)
    throw(MException("EBKernelOptions:invalidScaleOption", ...
        "Option must be a struct."));
end
if ~all(ismember(string(fieldnames(A)), ["XRes", "YRes", "ResUnit", "BarLength"]))
    throw(MException("EBKernelOptions:invalidScaleKey", ...
        "Unsupported key in scale option."));
end
end

function validatetracker(A)
if ~isstruct(A)
    throw(MException("EBKernelOptions:invalidTrackerOption", ...
        "Option must be a struct."));
end
if ~all(ismember(string(fieldnames(A)), ...
        ["lodopts", "mpopts", "omopts", "tkopts"]))
    throw(MException("EBKernelOptions:invalidTrackerKey", ...
        "Unsupported key in tracker option."));
end
end

function validateparameterizer(A)
if ~isstruct(A)
    throw(MException("EBKernelOptions:invalidParameterizerOption", ...
        "Option must be a struct."));
end
if ~all(ismember(string(fieldnames(A)), ["backbone_curvature", "center_acceleration", ...
        "center_velocity", "head_direction", "segment_acceleration", ...
        "segment_velocity", "tail_direction"]))
    throw(MException("EBKernelOptions:invalidParameterizerKey", ...
        "Unsupported key in parameterizer option."));
end
end

function validatepopulation(A)
if ~isstruct(A)
    throw(MException("EBKernelOptions:invalidPopulationOption", ...
        "Option must be a struct."));
end
if ~all(ismember(string(fieldnames(A)), ["diffusion", "preference"]))
    throw(MException("EBKernelOptions:invalidPopulationKey", ...
        "Unsupported key in population option."));
end
end
